From skinner at dojotoolkit.org  Sat Apr  8 07:55:04 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Sat Apr  8 07:55:04 2006
Subject: [openrecord-dev] Rhizome and OpenRecord
Message-ID: <4437503F.8080306@dojotoolkit.org>

Hi everyone,

One of the people who's recently joined the openrecord-dev mailing list 
is Adam Souzis, author of the Rhizome Wiki and the Raccoon RDF-based 
application server.  (More good info at http://www.liminalzone.org/ )

Adam has been digging into the OpenRecord code recently, looking at what 
it would take to get OpenRecord talking to an RDF server, and looking at 
re-using the OpenRecord table view in the Rhizome Wiki.  He and I have 
exchanged a couple messages today, and I thought this thread might be 
interesting to other people on the openrecord-dev list, so with Adam's 
permission I'm including the (slightly abridged) messages here...

:o) Brian


-------- Original Message --------
Subject: Re: [swikig] ANNOUNCE: Rhizome 0.6.0
Date: Fri, 7 Apr 2006 03:01:20 -0700
From: Adam Souzis
To: Brian Douglas Skinner <skinner at dojotoolkit.org>

hi brian,

thanks... now that i finally got that out of the way (and finished my
paper for the semantic wiki conference) i have some time look at open
record again.

When we last talked i was investigating writing an openrecord json to
RDF converter. But as I dug into the code, i'm reconsidering whether
that's the best starting point. Right now i'm thinking about trying to
hack the tableplugin into rhizome.  It'll be messy and not a 100%
AJAX-y but this is fastest path i can think of to get something that
can actually be used. Here's how I am thinking of implementing this:

* map RDF resource to Items
** treat the resource URI as the UUID
** multiple valued entries map to multiple statements with the same
attribute as the property (this doesn't preserve the order of the
values in the entry but its not clear to me if that's part of your
model)
** map orp data types to the XML schema datatypes that RDF uses
** map rdf:type to Category attribute, rdfs:range to ExpectedType,
rdfs:label to shortname, rdfs:comment to name
** ignore inverse attributes for now

* Have the server generate a list of all the items that the table
plugin may need to access:
Here are the RxPath queries for this, assuming the table contains all
resource of given Category/RDF class:

** items = /*[rdf:type=$category]
** attributes = id($items/*)
** expectedTypes = id($attributes/rdfs:range/*)
** suggestedItems = /*[rdf:type = $expectedTypes]
** plus the layout item resource for this table instance

* derive an simple archive class from StubArchive. The archive is
initialized with only these items (plus it loads the axiomatic ones).
When committing a transaction it converts the items back to RDF
(probably in JSON format) and sends it back to the server. I'm not
sure I understand what records can be in the transaction list: It
looks like votes represent items added or removed, Items can be added
to the transaction list directly and then there are these Ordinal
things that I don't understand.

* write a new View class for containing the plugin view and
intializing everything; hack tableplugin, plugin view, entry view,
etc. as necessary

Does this make sense? Am I missing anything?

cheers,
adam


From skinner at dojotoolkit.org  Sat Apr  8 07:59:01 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Sat Apr  8 07:59:01 2006
Subject: [openrecord-dev] Re: Rhizome and OpenRecord
In-Reply-To: <4437503F.8080306@dojotoolkit.org>
References: <4437503F.8080306@dojotoolkit.org>
Message-ID: <44375136.3080206@dojotoolkit.org>

And my reply to Adam's mail...


-------- Original Message --------
Subject: Re: [swikig] ANNOUNCE: Rhizome 0.6.0
Date: Fri, 07 Apr 2006 15:32:56 -0700
From: Brian Douglas Skinner <skinner at dojotoolkit.org>
To: Adam Souzis

Hi Adam,

 > now that i finally got that out of the way ... i have
 > some time look at open record again.

Cool, let me know how I can help.

 > Right now i'm thinking about trying to hack the tableplugin
 > into rhizome.  It'll be messy and not a 100% AJAX-y but
 > this is fastest path i can think of to get something that
 > can actually be used.

Yup, sounds good.  Unfortunately the tableplugin hasn't been designed as
a stand alone component, so there may be a bunch of crude hacking
involved to provide it with an environment that it thinks it can live in.

 >  Here's how I am thinking of implementing this:
 >
 > * map RDF resource to Items
 > ** treat the resource URI as the UUID
 > ** multiple valued entries map to multiple statements with
 > the same attribute as the property
 > ** map orp data types to the XML schema datatypes that RDF uses
 > ** map rdf:type to Category attribute, rdfs:range to
 > ExpectedType, rdfs:label to shortname, rdfs:comment to name
 > ** ignore inverse attributes for now

Yes, those mappings sounds good.  It's not entirely clear to me what the
name/label mappings should be, and I'm not fluent enough in RDF to know
how rdfs:label and rdfs:comment are typically used.  You might think
about mapping rdfs:label to name and rdfs:comment to summary, and then
figuring out something else to do with shortname.

 > * Have the server generate a list of all the items that the
 > table plugin may need to access:
 > Here are the RxPath queries for this, assuming the table
 > contains all resource of given Category/RDF class:
 >
 > ** items = /*[rdf:type=$category]
 > ** attributes = id($items/*)
 > ** expectedTypes = id($attributes/rdfs:range/*)
 > ** suggestedItems = /*[rdf:type = $expectedTypes]
 > ** plus the layout item resource for this table instance

I don't know XPath (or RxPath), but those queries look good as far as I
can tell.

 > * derive an simple archive class from StubArchive. The archive
 > is initialized with only these items (plus it loads the axiomatic
 >  ones). When committing a transaction it converts the items back
 > to RDF (probably in JSON format) and sends it back to the server.

Yup, sounds good.  I'd be interested in talking to you sometime about
different JSON representations for RDF.  I just recently learned that
there are RDF stores that return SPARQL results as JSON, which would be
very convenient for an AJAX app.  I'm curious about other flavors of
JSON/RDF.

 > I'm not sure I understand what records can be in the transaction
 > list: It looks like votes represent items added or removed, Items
 > can be added to the transaction list directly and then there are
 > these Ordinal things that I don't understand.

There are four types of records: Entries, Items, Votes, and Ordinals.

Most records will just be Entries, and most Entries are essentially RDF
statements.

Item records have *only* the UUID of the item, and just serve to state
that the Item exists.  You might be able to get rid of the notion of the
Item record, and simply infer the existence of the Item from the fact
that some Entry is making a statement about it.

A "Vote" (perhaps poorly named) just flags an Item or Entry as having
been deleted by a user, or undeleted again by the same user or another user.

The Ordinal records are a mechanism for representing ordered lists --
ordered lists of items (resources) or ordered list of entries
(statements)...

 > ** multiple valued entries map to multiple statements with
 > the same attribute as the property (this doesn't preserve
 > the order of the values in the entry but its not clear to
 > me if that's part of your model)

I know RDF has some mechanism(s) for representing ordered lists, but I
don't know much about it.  Probably my notion of Ordinal values doesn't
map cleanly to any RDF notion.  The goal with the Ordinal mechanism was
to come up with a representation of the ordering that would work
smoothly with multi-user concurrent access and with a distributed
datastore.  I wanted users to be able to independently move two of
the elements in a list, and then be able to merge those actions later.

So the idea is that each element in a list has an ordinal number --
ordered lists themselves are never explicitly represented -- you can
take any query result set (a set of items/resources or a set of
entries/statements) and view the results as an ordered list simply by
sorting the results based on their ordinal numbers.

 > * write a new View class for containing the plugin view and
 > intializing everything; hack tableplugin, plugin view, entry
 > view, etc. as necessary
 >
 > Does this make sense? Am I missing anything?

Sounds great.  You're all over it.  I can't think of anything you're
missing!

:o) Brian


From adamsz at gmail.com  Sat Apr  8 11:34:01 2006
From: adamsz at gmail.com (Adam Souzis)
Date: Sat Apr  8 11:34:01 2006
Subject: [openrecord-dev] Re: Rhizome and OpenRecord
In-Reply-To: <44375136.3080206@dojotoolkit.org>
References: <4437503F.8080306@dojotoolkit.org>
	 <44375136.3080206@dojotoolkit.org>
Message-ID: <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>

hi brian &c,

a couple of comments below...
-- adam

On 4/7/06, Brian Douglas Skinner <skinner at dojotoolkit.org> wrote:
> And my reply to Adam's mail...
>
>
> -------- Original Message --------
> Subject: Re: [swikig] ANNOUNCE: Rhizome 0.6.0
> Date: Fri, 07 Apr 2006 15:32:56 -0700
> From: Brian Douglas Skinner <skinner at dojotoolkit.org>
> To: Adam Souzis
>
> Hi Adam,
>
>  > now that i finally got that out of the way ... i have
>  > some time look at open record again.
>
> Cool, let me know how I can help.
>
>  > Right now i'm thinking about trying to hack the tableplugin
>  > into rhizome.  It'll be messy and not a 100% AJAX-y but
>  > this is fastest path i can think of to get something that
>  > can actually be used.
>
> Yup, sounds good.  Unfortunately the tableplugin hasn't been designed as
> a stand alone component, so there may be a bunch of crude hacking
> involved to provide it with an environment that it thinks it can live in.
>
>  >  Here's how I am thinking of implementing this:
>  >
>  > * map RDF resource to Items
>  > ** treat the resource URI as the UUID
>  > ** multiple valued entries map to multiple statements with
>  > the same attribute as the property
>  > ** map orp data types to the XML schema datatypes that RDF uses
>  > ** map rdf:type to Category attribute, rdfs:range to
>  > ExpectedType, rdfs:label to shortname, rdfs:comment to name
>  > ** ignore inverse attributes for now
>
> Yes, those mappings sounds good.  It's not entirely clear to me what the
> name/label mappings should be, and I'm not fluent enough in RDF to know
> how rdfs:label and rdfs:comment are typically used.  You might think
> about mapping rdfs:label to name and rdfs:comment to summary, and then
> figuring out something else to do with shortname.
>
>  > * Have the server generate a list of all the items that the
>  > table plugin may need to access:
>  > Here are the RxPath queries for this, assuming the table
>  > contains all resource of given Category/RDF class:
>  >
>  > ** items = /*[rdf:type=$category]
>  > ** attributes = id($items/*)
>  > ** expectedTypes = id($attributes/rdfs:range/*)
>  > ** suggestedItems = /*[rdf:type = $expectedTypes]
>  > ** plus the layout item resource for this table instance
>
> I don't know XPath (or RxPath), but those queries look good as far as I
> can tell.
>
>  > * derive an simple archive class from StubArchive. The archive
>  > is initialized with only these items (plus it loads the axiomatic
>  >  ones). When committing a transaction it converts the items back
>  > to RDF (probably in JSON format) and sends it back to the server.
>
> Yup, sounds good.  I'd be interested in talking to you sometime about
> different JSON representations for RDF.  I just recently learned that
> there are RDF stores that return SPARQL results as JSON, which would be
> very convenient for an AJAX app.  I'm curious about other flavors of
> JSON/RDF.
>

oh, I haven't heard of any JSON RDF representatioins myself, I'd be
interested looking at that too if you have any references. I was just
planning to do something very simple, e.g. a list of statements in
json like:

[ ['subject', 'predicate', 'object', 'objectType'], etc. ]

which can be "parsed" in one line of Python code:

listOfStatements = [Statement(*s) for s in eval(jsonString)]
the only tricky thing would be escaping the strings

>  > I'm not sure I understand what records can be in the transaction
>  > list: It looks like votes represent items added or removed, Items
>  > can be added to the transaction list directly and then there are
>  > these Ordinal things that I don't understand.
>
> There are four types of records: Entries, Items, Votes, and Ordinals.
>
> Most records will just be Entries, and most Entries are essentially RDF
> statements.
>
> Item records have *only* the UUID of the item, and just serve to state
> that the Item exists.  You might be able to get rid of the notion of the
> Item record, and simply infer the existence of the Item from the fact
> that some Entry is making a statement about it.
>
> A "Vote" (perhaps poorly named) just flags an Item or Entry as having
> been deleted by a user, or undeleted again by the same user or another user.
>
> The Ordinal records are a mechanism for representing ordered lists --
> ordered lists of items (resources) or ordered list of entries
> (statements)...
>
>  > ** multiple valued entries map to multiple statements with
>  > the same attribute as the property (this doesn't preserve
>  > the order of the values in the entry but its not clear to
>  > me if that's part of your model)
>
> I know RDF has some mechanism(s) for representing ordered lists, but I
> don't know much about it.  Probably my notion of Ordinal values doesn't
> map cleanly to any RDF notion.  The goal with the Ordinal mechanism was
> to come up with a representation of the ordering that would work
> smoothly with multi-user concurrent access and with a distributed
> datastore.  I wanted users to be able to independently move two of
> the elements in a list, and then be able to merge those actions later.
>
> So the idea is that each element in a list has an ordinal number --
> ordered lists themselves are never explicitly represented -- you can
> take any query result set (a set of items/resources or a set of
> entries/statements) and view the results as an ordered list simply by
> sorting the results based on their ordinal numbers.

ok, i think i get it now. It's a little unusual in that this
establishes a total order over every item and entry -- looking at the
source code, it seems that if an ordinal has not been explicity set,
you use the record's timestamp as the ordinal.

The closest notion RDF has to this is an infinite set of properties
named rdf:_1 through rdf:_n that are uses to establish ordered
relations, but not any sort of global order.  Besides saving the order
of columns in a table, are explicitly ordered relationships used
elsewhere in OpenRecord?

So... to deal with this: when converting an entry to RDF, if an entry
has an explicit ordinal associated with, instead of adding a single
statement, add two statements:

item attribute rdf:Seq
and
rdf:Seq rdf:_<ordinal> value
where rdf:Seq is a blank node whose identifier is derived from
concatenating the item and attribute UUIDs.

>  > * write a new View class for containing the plugin view and
>  > intializing everything; hack tableplugin, plugin view, entry
>  > view, etc. as necessary
>  >
>  > Does this make sense? Am I missing anything?
>
> Sounds great.  You're all over it.  I can't think of anything you're
> missing!
>
> :o) Brian
> ___________________________________________________________________
> Copyright rights relinquished. This work is in the Public Domain.
> For details see: http://creativecommons.org/licenses/publicdomain/
>
> openrecord-dev mailing list
> openrecord-dev at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/openrecord-dev
>


From skinner at dojotoolkit.org  Sat Apr  8 22:53:19 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Sat Apr  8 22:53:19 2006
Subject: [openrecord-dev] Re: Rhizome and OpenRecord
In-Reply-To: <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
References: <4437503F.8080306@dojotoolkit.org>	 <44375136.3080206@dojotoolkit.org> <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
Message-ID: <443822B8.1040604@dojotoolkit.org>

Adam Souzis wrote:
> oh, I haven't heard of any JSON RDF representatioins myself,
> I'd be interested looking at that too if you have any references. 

I don't know a lot about JSON RDF representations -- I just happened on 
a few intriguing pages last week:

Elias Torres's blog:
  http://torrez.us/archives/2006/02/24/418

Dave Beckett's blog:
  http://journal.dajobe.org/journal/posts/2006/02/16/my-rdf-week/

"Serializing SPARQL Query Results in JSON":
  http://www.mindswap.org/~kendall/sparql-results-json/

- Brian



From skinner at dojotoolkit.org  Sat Apr  8 22:55:01 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Sat Apr  8 22:55:01 2006
Subject: [openrecord-dev] Re: Rhizome and OpenRecord
In-Reply-To: <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
References: <4437503F.8080306@dojotoolkit.org>	 <44375136.3080206@dojotoolkit.org> <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
Message-ID: <44382334.4060306@dojotoolkit.org>

Hey Adam,

>> > * Have the server generate a list of all the items that 
>> > the table plugin may need to access:
>> > Here are the RxPath queries for this, assuming the table
>> > contains all resource of given Category/RDF class:
>> >
>> > ** items = /*[rdf:type=$category]
>> > ** attributes = id($items/*)
>> > ** expectedTypes = id($attributes/rdfs:range/*)
>> > ** suggestedItems = /*[rdf:type = $expectedTypes]
>> > ** plus the layout item resource for this table instance
>>
>>I don't know XPath (or RxPath), but those queries look good as 
>>far as I can tell.

I don't know if the above queries already cover this, but the table 
plugin will also need the names and/or shortnames of (a) the attributes, 
(b) the suggestedItems, and (c) the relatedItems (the objects of 
statements about the items in the table).

- Brian


From skinner at dojotoolkit.org  Tue Apr 11 00:16:03 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Tue Apr 11 00:16:03 2006
Subject: [openrecord-dev] Re: Rhizome and OpenRecord
In-Reply-To: <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
References: <4437503F.8080306@dojotoolkit.org>	 <44375136.3080206@dojotoolkit.org> <d7cee4a70604080233v27c7b14cu4e9519f131a488cc@mail.gmail.com>
Message-ID: <443AD92C.2030703@dojotoolkit.org>

>>So the idea is that each element in a list has an ordinal number 
>>-- ordered lists themselves are never explicitly represented -- 
>>you can take any query result set (a set of items/resources or  
>>a set of entries/statements) and view the results as an ordered 
>>list by sorting the results based on their ordinal numbers.
> 
> ok, i think i get it now. It's a little unusual in that this
> establishes a total order over every item and entry -- looking 
> at the source code, it seems that if an ordinal has not been 
> explicity set, you use the record's timestamp as the ordinal.

Yup, that's right.

> Besides saving the order of columns in a table, are explicitly 
> ordered relationships used elsewhere in OpenRecord?  

Yes, I think ordinal-based orderings show up in lots of places in the UI:
   - the order of menu items in the nav-bar
   - the order of lozenges within a single table cell
   - the order of columns in a table
   - the order of rows in a table (if it hasn't been sorted)
   - the order of sections on a page

> The closest notion RDF has to this is an infinite set of 
> properties named rdf:_1 through rdf:_n that are uses to 
> establish ordered relations, but not any sort of global order.  
> 
> So... to deal with this: when converting an entry to RDF, if 
> an entry has an explicit ordinal associated with, instead of 
> adding a single statement, add two statements:
> 
> item attribute rdf:Seq
> and
> rdf:Seq rdf:_<ordinal> value
> where rdf:Seq is a blank node whose identifier is derived from
> concatenating the item and attribute UUIDs.

I'm very much an RDF novice, but the idea of creating all those special 
numbered properties seems scary.  It seems like those special ordinal 
properties aren't "real" properties (e.g. the user should never see them 
included in a list of properties).

What about having a single property, "ordinal value", and using 
reification to assign a value for that property to a specific 
statement/entry?  Or, alternatively, instead of using reification to get 
a URI for statement, using the quad-store notion of a "context" or 
"named graph" to attach ordinal metadata to a statement?

Or, in order to start connecting the OpenRecord view code to RDF-based 
datastores, perhaps we need to abandon the whole OpenRecord ordinal 
idea, and adopt a more RDF-esque solution to the ordering problem?

:o) Brian


From skinner at dojotoolkit.org  Fri Apr 21 00:19:10 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Fri Apr 21 00:19:10 2006
Subject: [openrecord-dev] Dojo Developer Day -- Sat May 13, 2006 -- Mountain View CA
Message-ID: <444808DB.3020906@dojotoolkit.org>

For those of you in the San Francisco Bay Area...

Dojo is hosting a "Dojo Developer Day"
on Saturday May 13, 2006
at the AOL offices in Mountain View

More info will be posted here:
   http://dojo.jot.com/WikiHome/DojoDevDay

I'm planning on going -- hope to see you there!

:o) Brian



From skinner at dojotoolkit.org  Fri Apr 28 10:46:01 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Fri Apr 28 10:46:01 2006
Subject: [openrecord-dev] Google's "Summer of Code"
Message-ID: <4451D65C.6040504@dojotoolkit.org>

Dojo is one of the mentor organizations in this year's "Summer of Code", 
the program where Google offers $4,500 stipends to students who want to 
contribute to open source projects.

If you know students who might want to take part in the Summer of Code, 
the application period runs for the next week, May 1 to May 8.  More 
info here:
   http://code.google.com/soc/

If you know students who might want to work on Dojo or OpenRecord, we've 
got project ideas posted here:
   http://dojo.jot.com/SummerOfCode2006

:o) Brian



From skinner at dojotoolkit.org  Fri Apr 28 10:47:04 2006
From: skinner at dojotoolkit.org (Brian Douglas Skinner)
Date: Fri Apr 28 10:47:04 2006
Subject: [openrecord-dev] OpenLaszlo and Dojo announce partnership
Message-ID: <4451D666.5090500@dojotoolkit.org>

Good news...

Dojo and OpenLaszlo are going to be collaborating:
   http://www.openlaszlo.org/node/314

:o) Brian


